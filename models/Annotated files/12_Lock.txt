16.10.  Operation 12: LOCK - Create Lock

16.10.1.  SYNOPSIS

     (cfh) locktype, reclaim, offset, length, locker -> stateid

16.10.2.  ARGUMENT

   enum nfs_lock_type4 {
           READ_LT         = 1,
           WRITE_LT        = 2,
           READW_LT        = 3,    /* blocking read */
           WRITEW_LT       = 4     /* blocking write */
   };

   /*
    * For LOCK, transition from open_owner to new lock_owner
    */
   struct open_to_lock_owner4 {
           seqid4          open_seqid;
           stateid4        open_stateid;
           seqid4          lock_seqid;
           lock_owner4     lock_owner;
   };

   /*
    * For LOCK, existing lock_owner continues to request file locks
    */
   struct exist_lock_owner4 {
           stateid4        lock_stateid;
           seqid4          lock_seqid;
   };

   union locker4 switch (bool new_lock_owner) {
    case TRUE:
            open_to_lock_owner4     open_owner;
    case FALSE:
            exist_lock_owner4       lock_owner;
   };


   /*
    * LOCK/LOCKT/LOCKU: Record lock management
    */
   struct LOCK4args {
           /* CURRENT_FH: file */
           nfs_lock_type4  locktype;
           bool            reclaim;
           offset4         offset;
           length4         length;
           locker4         locker;
   };

16.10.3.  RESULT

   struct LOCK4denied {
           offset4         offset;
           length4         length;
           nfs_lock_type4  locktype;
           lock_owner4     owner;
   };

   struct LOCK4resok {
           stateid4        lock_stateid;
   };

   union LOCK4res switch (nfsstat4 status) {
    case NFS4_OK:
            LOCK4resok     resok4;
    case NFS4ERR_DENIED:
            LOCK4denied    denied;
    default:
            void;
   };

16.10.4.  DESCRIPTION

The LOCK operation requests a byte-range lock for the byte range specified by the offset and length parameters <NULL>.  The lock type is also specified to be one of the nfs_lock_type4s <NULL>.  If this is a reclaim request, the reclaim parameter will be TRUE <NULL>.

Bytes in a file may be locked even if those bytes are not currently allocated to the file <NULL>.  To lock the file from a specific offset through the end-of-file (no matter how long the file actually is), use a length field with all bits set to 1 (one) <NULL>.  If the length is  zero, or if a length that is not all bits set to one is specified, and the length when added to the offset exceeds the maximum 64-bit unsigned integer value, the error NFS4ERR_INVAL will result <NULL>.

32-bit servers are servers that support locking for byte offsets that fit within 32 bits (i.e., less than or equal to NFS4_UINT32_MAX) <NULL>.  If the client specifies a range that overlaps one or more bytes beyond offset NFS4_UINT32_MAX but does not end at offset NFS4_UINT64_MAX, then such a 32-bit server MUST return the error NFS4ERR_BAD_RANGE <NULL>.

In the case that the lock is denied, the owner, offset, and length of a conflicting lock are returned <NULL>.

On success, the current filehandle retains its value <NULL>.

16.10.5.  IMPLEMENTATION

If the server is unable to determine the exact offset and length of the conflicting lock, the same offset and length that were provided in the arguments should be returned in the denied results <NULL>.  Section 9 contains a full description of this and the other file locking operations <NULL>.

LOCK operations are subject to permission checks and to checks against the access type of the associated file <NULL>.  However, the specific rights and modes required for various types of locks reflect the semantics of the server-exported file system, and are not specified by the protocol <NULL>.  For example, Windows 2000 allows a write lock of a file open for READ, while a POSIX-compliant system does not <NULL>.

When the client makes a lock request that corresponds to a range that the lock-owner has locked already (with the same or different lock type), or to a sub-region of such a range, or to a region that includes multiple locks already granted to that lock-owner, in whole or in part, and the server does not support such locking operations (i.e., does not support POSIX locking semantics), the server will return the error NFS4ERR_LOCK_RANGE <NULL>.  In that case, the client may return an error, or it may emulate the required operations, using only LOCK for ranges that do not include any bytes already locked by that lock-owner and LOCKU of locks held by that lock-owner (specifying an exactly matching range and type) <NULL>.  Similarly, when the client makes a lock request that amounts to upgrading (changing from a read lock to a write lock) or downgrading (changing from a write lock to a read lock) an existing record lock and the server does not support such a lock, the server will return NFS4ERR_LOCK_NOTSUPP <NULL>. Such operations may not perfectly reflect the required semantics in the face of conflicting lock requests from other clients <NULL>.

When a client holds an OPEN_DELEGATE_WRITE delegation, the client holding that delegation is assured that there are no opens by other clients <NULL>.  Thus, there can be no conflicting LOCK operations from such clients <NULL>.  Therefore, the client may be handling locking requests locally, without doing LOCK operations on the server <NULL>.  If it does that, it must be prepared to update the lock status on the server by sending appropriate LOCK and LOCKU operations before returning the delegation <NULL>.

When one or more clients hold OPEN_DELEGATE_READ delegations, any LOCK operation where the server is implementing mandatory locking semantics MUST result in the recall of all such delegations <NULL>.  The LOCK operation may not be granted until all such delegations are returned or revoked <NULL>.  Except where this happens very quickly, one or more NFS4ERR_DELAY errors will be returned to requests made while the delegation remains outstanding <NULL>.

The locker argument specifies the lock-owner that is associated with the LOCK request <NULL>.  The locker4 structure is a switched union that indicates whether the client has already created byte-range locking state associated with the current open file and lock-owner <NULL>.  There are multiple cases to be considered, corresponding to possible combinations of whether locking state has been created for the current open file and lock-owner, and whether the boolean new_lock_owner is set <NULL>.  In all of the cases, there is a lock_seqid specified, whether the lock-owner is specified explicitly or implicitly <NULL>.  This seqid value is used for checking lock-owner sequencing/replay issues <NULL>.  When the given lock-owner is not known to the server, this establishes an initial sequence value for the new lock-owner <NULL>.

o  In the case in which the state has been created and the boolean is false, the only part of the argument other than lock_seqid is just a stateid representing the set of locks associated with that open file and lock-owner <NULL>.

o  In the case in which the state has been created and the boolean is true, the server rejects the request with the error NFS4ERR_BAD_SEQID <NULL>.  The only exception is where there is a retransmission of a previous request in which the boolean was true <NULL>.  In this case, the lock_seqid will match the original request, and the response will reflect the final case, below <NULL>.

o  In the case where no byte-range locking state has been established and the boolean is true, the argument contains an open_to_lock_owner structure that specifies the stateid of the open file and the lock-owner to be used for the lock <NULL>.  Note that although the open-owner is not given explicitly, the open_seqid associated with it is used to check for open-owner sequencing issues <NULL>.  This case provides a method to use the established state of the open_stateid to transition to the use of a lock stateid <NULL>.

