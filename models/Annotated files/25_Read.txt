16.23.  Operation 25: READ - Read from File

16.23.1.  SYNOPSIS

     (cfh), stateid, offset, count -> eof, data

16.23.2.  ARGUMENT

   struct READ4args {
           /* CURRENT_FH: file */
           stateid4        stateid;
           offset4         offset;
           count4          count;
   };

16.23.3.  RESULT

   struct READ4resok {
           bool            eof;
           opaque          data<>;
   };

   union READ4res switch (nfsstat4 status) {
    case NFS4_OK:
            READ4resok     resok4;
    default:
            void;
   };

16.23.4.  DESCRIPTION

The READ operation reads data from the regular file identified by the current filehandle <NULL>.

The client provides an offset of where the READ is to start and a count of how many bytes are to be read <NULL>.  An offset of 0 (zero) means to read data starting at the beginning of the file <NULL>.  If the offset is greater than or equal to the size of the file, the status, NFS4_OK, is returned with a data length set to 0 (zero), and eof is set to TRUE <NULL>.  The READ is subject to access permissions checking <NULL>.

If the client specifies a count value of 0 (zero), the READ succeeds and returns 0 (zero) bytes of data (subject to access permissions checking) <NULL>.  The server may choose to return fewer bytes than specified by the client <NULL>.  The client needs to check for this condition and handle the condition appropriately <NULL>.

The stateid value for a READ request represents a value returned from a previous byte-range lock or share reservation request, or the stateid associated with a delegation <NULL>.  The stateid is used by the server to verify that the associated share reservation and any byte-range locks are still valid and to update lease timeouts for the client <NULL>.

If the READ ended at the end-of-file (formally, in a correctly formed READ request, if offset + count is equal to the size of the file), or the READ request extends beyond the size of the file (if offset + count is greater than the size of the file), eof is returned as TRUE; otherwise, it is FALSE <NULL>.  A successful READ of an empty file will always return eof as TRUE <NULL>.

If the current filehandle is not a regular file, an error will be returned to the client <NULL>.  In the case where the current filehandle represents a directory, NFS4ERR_ISDIR is returned; otherwise, NFS4ERR_INVAL is returned <NULL>.

For a READ using the special anonymous stateid, the server MAY allow the READ to be serviced subject to mandatory file locks or the current share_deny modes for the file <NULL>.  For a READ using the special READ bypass stateid, the server MAY allow READ operations to bypass locking checks at the server <NULL>.

On success, the current filehandle retains its value <NULL>.

16.23.5.  IMPLEMENTATION

If the server returns a "short read" (i.e., less data than requested and eof is set to FALSE), the client should send another READ to get the remaining data <NULL>.  A server may return less data than requested under several circumstances <NULL>.  The file may have been truncated by another client or perhaps on the server itself, changing the file size from what the requesting client believes to be the case <NULL>.  This would reduce the actual amount of data available to the client <NULL>.  It is possible that the server reduces the transfer size and so returns a short read result <NULL>.  Server resource exhaustion may also result in a short read <NULL>.

If mandatory byte-range locking is in effect for the file, and if the byte range corresponding to the data to be read from the file is WRITE_LT locked by an owner not associated with the stateid, the server will return the NFS4ERR_LOCKED error <NULL>.  The client should try to get the appropriate READ_LT via the LOCK operation before re-attempting the READ <NULL>.  When the READ completes, the client should release the byte-range lock via LOCKU <NULL>.

If another client has an OPEN_DELEGATE_WRITE delegation for the file being read, the delegation must be recalled, and the operation cannot proceed until that delegation is returned or revoked <NULL>.  Except where this happens very quickly, one or more NFS4ERR_DELAY errors will be returned to requests made while the delegation remains outstanding <NULL>. Normally, delegations will not be recalled as a result of a READ operation, since the recall will occur as a result of an earlier OPEN <NULL>.  However, since it is possible for a READ to be done with a special stateid, the server needs to check for this case even though the client should have done an OPEN previously <NULL>.


