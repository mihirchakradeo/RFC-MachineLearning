16.3.  Operation 5: COMMIT - Commit Cached Data

16.3.1.  SYNOPSIS

     (cfh), offset, count -> verifier

16.3.2.  ARGUMENT

   struct COMMIT4args {
           /* CURRENT_FH: file */
           offset4         offset;
           count4          count;
   };

16.3.3.  RESULT

   struct COMMIT4resok {
           verifier4       writeverf;
   };

   union COMMIT4res switch (nfsstat4 status) {
    case NFS4_OK:
            COMMIT4resok   resok4;
    default:
            void;
   };

16.3.4.  DESCRIPTION

The COMMIT operation forces or flushes data to stable storage for the file specified by the current filehandle <NULL>.   The flushed data is that which was previously written with a WRITE operation that had the stable field set to UNSTABLE4 <NULL>. 

The offset specifies the position within the file where the flush is to begin <NULL>.   An offset value of 0 (zero) means to flush data starting at the beginning of the file <NULL>.   The count specifies the number of bytes of data to flush <NULL>.   If count is 0 (zero), a flush from the offset to the end of the file is done <NULL>. 

The server returns a write verifier upon successful completion of the COMMIT <NULL>.   The write verifier is used by the client to determine if the server has restarted or rebooted between the initial WRITE(s) and the COMMIT <NULL>.   The client does this by comparing the write verifier returned from the initial writes and the verifier returned by the COMMIT operation <NULL>.   The server must vary the value of the write verifier at each server event or instantiation that may lead to a loss of uncommitted data <NULL>.   Most commonly, this occurs when the server is rebooted; however, other events at the server may result in uncommitted data loss as well <NULL>. 

On success, the current filehandle retains its value <NULL>. 

16.3.5.  IMPLEMENTATION

The COMMIT operation is similar in operation and semantics to the POSIX fsync() [fsync] system call that synchronizes a file's state with the disk (file data and metadata are flushed to disk or stable storage) <NULL>.   COMMIT performs the same operation for a client, flushing any unsynchronized data and metadata on the server to the server's disk or stable storage for the specified file <NULL>.   Like fsync(), it may be that there is some modified data or no modified data to synchronize <NULL>.   The data may have been synchronized by the server's normal periodic buffer synchronization activity <NULL>.   COMMIT should return NFS4_OK, unless there has been an unexpected error <NULL>. 

COMMIT differs from fsync() in that it is possible for the client to flush a range of the file (most likely triggered by a buffer- reclamation scheme on the client before the file has been completely written) <NULL>. 

The server implementation of COMMIT is reasonably simple <NULL>.   If the server receives a full file COMMIT request that is starting at offset 0 and count 0, it should do the equivalent of fsync()'ing the file <NULL>.  Otherwise, it should arrange to have the cached data in the range specified by offset and count to be flushed to stable storage <NULL>.   In both cases, any metadata associated with the file must be flushed to stable storage before returning <NULL>.   It is not an error for there to be nothing to flush on the server <NULL>.   This means that the data and metadata that needed to be flushed have already been flushed or lost during the last server failure <NULL>. 

The client implementation of COMMIT is a little more complex <NULL>.   There are two reasons for wanting to commit a client buffer to stable storage <NULL>.   The first is that the client wants to reuse a buffer <NULL>.   In this case, the offset and count of the buffer are sent to the server in the COMMIT request <NULL>.   The server then flushes any cached data based on the offset and count, and flushes any metadata associated with the file <NULL>.   It then returns the status of the flush and the write verifier <NULL>.   The other reason for the client to generate a COMMIT is for a full file flush, such as may be done at CLOSE <NULL>.   In this case, the client would gather all of the buffers for this file that contain uncommitted data, do the COMMIT operation with an offset of 0 and count of 0, and then free all of those buffers <NULL>.   Any other dirty buffers would be sent to the server in the normal fashion <NULL>. 

After a buffer is written by the client with the stable parameter set to UNSTABLE4, the buffer must be considered modified by the client until the buffer has been either flushed via a COMMIT operation or written via a WRITE operation with the stable parameter set to FILE_SYNC4 or DATA_SYNC4 <NULL>.   This is done to prevent the buffer from being freed and reused before the data can be flushed to stable storage on the server <NULL>. 

When a response is returned from either a WRITE or a COMMIT operation and it contains a write verifier that is different than previously returned by the server, the client will need to retransmit all of the buffers containing uncommitted cached data to the server <NULL>.   How this is to be done is up to the implementer <NULL>.   If there is only one buffer of interest, then it should probably be sent back over in a WRITE request with the appropriate stable parameter <NULL>.   If there is more than one buffer, it might be worthwhile to retransmit all of the buffers in WRITE requests with the stable parameter set to UNSTABLE4 and then retransmit the COMMIT operation to flush all of the data on the server to stable storage <NULL>.   The timing of these retransmissions is left to the implementer <NULL>. 

The above description applies to page-cache-based systems as well as buffer-cache-based systems <NULL>.   In those systems, the virtual memory system will need to be modified instead of the buffer cache <NULL>. 
