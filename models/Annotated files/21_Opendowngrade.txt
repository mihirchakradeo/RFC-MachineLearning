16.19.  Operation 21: OPEN_DOWNGRADE - Reduce Open File Access

16.19.1.  SYNOPSIS

     (cfh), stateid, seqid, access, deny -> stateid

16.19.2.  ARGUMENT

   struct OPEN_DOWNGRADE4args {
           /* CURRENT_FH: opened file */
           stateid4        open_stateid;
           seqid4          seqid;
           uint32_t        share_access;
           uint32_t        share_deny;
   };

16.19.3.  RESULT

   struct OPEN_DOWNGRADE4resok {
           stateid4        open_stateid;
   };

   union OPEN_DOWNGRADE4res switch (nfsstat4 status) {
    case NFS4_OK:
            OPEN_DOWNGRADE4resok    resok4;
    default:
            void;
   };




16.19.4.  DESCRIPTION

This operation is used to adjust the share_access and share_deny bits for a given open <NULL>.  This is necessary when a given open-owner opens the same file multiple times with different share_access and share_deny flags <NULL>.  In this situation, a close of one of the opens may change the appropriate share_access and share_deny flags to remove bits associated with opens no longer in effect <NULL>.

The share_access and share_deny bits specified in this operation replace the current ones for the specified open file <NULL>.  The share_access and share_deny bits specified must be exactly equal to the union of the share_access and share_deny bits specified for some subset of the OPENs in effect for the current open-owner on the current file <NULL>.  If that constraint is not respected, the error NFS4ERR_INVAL should be returned <NULL>.  Since share_access and share_deny bits are subsets of those already granted, it is not possible for this request to be denied because of conflicting share reservations <NULL>.

As the OPEN_DOWNGRADE may change a file to be not-open-for-write and a write byte-range lock might be held, the server may have to reject the OPEN_DOWNGRADE with an NFS4ERR_LOCKS_HELD <NULL>.

On success, the current filehandle retains its value <NULL>.


