16.34.  Operation 36: SETCLIENTID_CONFIRM - Confirm Client ID

16.34.1.  SYNOPSIS

     clientid, setclientid_confirm -> -

16.34.2.  ARGUMENT

   struct SETCLIENTID_CONFIRM4args {
           clientid4       clientid;
           verifier4       setclientid_confirm;
   };

16.34.3.  RESULT

   struct SETCLIENTID_CONFIRM4res {
           nfsstat4        status;
   };

16.34.4.  DESCRIPTION

This operation is used by the client to confirm the results from a previous call to SETCLIENTID <NULL>.  The client provides the server-supplied (from a SETCLIENTID response) client ID <NULL>.  The server responds with a simple status of success or failure <NULL>.

16.34.5.  IMPLEMENTATION

The client must use the SETCLIENTID_CONFIRM operation to confirm the following two distinct cases:

o  The client's use of a new shorthand client identifier (as returned from the server in the response to SETCLIENTID), a new callback value (as specified in the arguments to SETCLIENTID), and a new callback_ident value (as specified in the arguments to SETCLIENTID) <NULL>.  The client's use of SETCLIENTID_CONFIRM in this case also confirms the removal of any of the client's previous relevant leased state <NULL>.  Relevant leased client state includes byte-range locks, share reservations, and -- where the server does not support the CLAIM_DELEGATE_PREV claim type -- delegations <NULL>.  If the server supports CLAIM_DELEGATE_PREV, then SETCLIENTID_CONFIRM MUST NOT remove delegations for this client; relevant leased client state would then just include byte-range locks and share reservations <NULL>.

o  The client's reuse of an old, previously confirmed shorthand client identifier; a new callback value; and a new callback_ident value <NULL>.  The client's use of SETCLIENTID_CONFIRM in this case MUST NOT result in the removal of any previous leased state (locks, share reservations, and delegations) <NULL>.

We use the same notation and definitions for v, x, c, k, s, and unconfirmed and confirmed client records as introduced in the description of the SETCLIENTID operation <NULL>.  The arguments to SETCLIENTID_CONFIRM are indicated by the notation { c, s }, where c is a value of type clientid4, and s is a value of type verifier4 corresponding to the setclientid_confirm field <NULL>.

As with SETCLIENTID, SETCLIENTID_CONFIRM is a non-idempotent operation, and we assume that the server is implementing the duplicate request cache (DRC) <NULL>.

When the server gets a SETCLIENTID_CONFIRM { c, s } request, it processes it in the following manner <NULL>.

o  It first looks up the request in the DRC <NULL>.  If there is a hit, it returns the result cached in the DRC <NULL>.  The server does not remove any relevant leased client state, nor does it modify any recorded callback and callback_ident information for client { x } as represented by the shorthand value c <NULL>.

For a DRC miss, the server checks for client records that match the shorthand value c <NULL>.  The processing cases are as follows:

o  The server has recorded an unconfirmed { v, x, c, k, s } record and a confirmed { v, x, c, l, t } record, such that s != t <NULL>.  If the principals of the records do not match that of the SETCLIENTID_CONFIRM, the server returns NFS4ERR_CLID_INUSE, and no relevant leased client state is removed and no recorded callback and callback_ident information for client { x } is changed <NULL>. Otherwise, the confirmed { v, x, c, l, t } record is removed and the unconfirmed { v, x, c, k, s } is marked as confirmed, thereby modifying recorded and confirmed callback and callback_ident information for client { x } <NULL>.

The server does not remove any relevant leased client state <NULL>.

The server returns NFS4_OK <NULL>.

o  The server has not recorded an unconfirmed { v, x, c, *, * } and has recorded a confirmed { v, x, c, *, s } <NULL>.  If the principals of the record and of SETCLIENTID_CONFIRM do not match, the server returns NFS4ERR_CLID_INUSE without removing any relevant leased client state, and without changing recorded callback and callback_ident values for client { x } <NULL>.

If the principals match, then what has likely happened is that the client never got the response from the SETCLIENTID_CONFIRM, and the DRC entry has been purged <NULL>.  Whatever the scenario, since the principals match, as well as { c, s } matching a confirmed record, the server leaves client x's relevant leased client state intact, leaves its callback and callback_ident values unmodified, and returns NFS4_OK <NULL>.

o  The server has not recorded a confirmed { *, *, c, *, * } and has recorded an unconfirmed { *, x, c, k, s } <NULL>.  Even if this is a retry from the client, nonetheless the client's first SETCLIENTID_CONFIRM attempt was not received by the server <NULL>.  Retry or not, the server doesn't know, but it processes it as if it were a first try <NULL>.  If the principal of the unconfirmed { *, x, c, k, s } record mismatches that of the SETCLIENTID_CONFIRM request, the server returns NFS4ERR_CLID_INUSE without removing any relevant leased client state <NULL>.

Otherwise, the server records a confirmed { *, x, c, k, s } <NULL>.  If there is also a confirmed { *, x, d, *, t }, the server MUST remove client x's relevant leased client state and overwrite the callback state with k <NULL>.  The confirmed record { *, x, d, *, t } is removed <NULL>.

The server returns NFS4_OK <NULL>.

o  The server has no record of a confirmed or unconfirmed { *, *, c, *, s } <NULL>.  The server returns NFS4ERR_STALE_CLIENTID <NULL>.  The server does not remove any relevant leased client state, nor does it modify any recorded callback and callback_ident information for any client <NULL>.

The server needs to cache unconfirmed { v, x, c, k, s } client records and await for some time their confirmation <NULL>.  As should be clear from the discussions of record processing for SETCLIENTID and SETCLIENTID_CONFIRM, there are cases where the server does not deterministically remove unconfirmed client records <NULL>.  To avoid running out of resources, the server is not required to hold unconfirmed records indefinitely <NULL>.  One strategy the server might use is to set a limit on how many unconfirmed client records it will maintain and then, when the limit would be exceeded, remove the oldest record <NULL>.  Another strategy might be to remove an unconfirmed record when some amount of time has elapsed <NULL>.  The choice of the amount of time is fairly arbitrary, but it is surely no higher than the server's lease time period <NULL>.  Consider that leases need to be renewed before the lease time expires via an operation from the client <NULL>.  If the client cannot issue a SETCLIENTID_CONFIRM after a SETCLIENTID before a period of time equal to a lease expiration time, then the client is unlikely to be able to maintain state on the server during steady-state operation <NULL>.

If the client does send a SETCLIENTID_CONFIRM for an unconfirmed record that the server has already deleted, the client will get NFS4ERR_STALE_CLIENTID back <NULL>.  If so, the client should then start over, and send SETCLIENTID to re-establish an unconfirmed client record and get back an unconfirmed client ID and setclientid_confirm verifier <NULL>.  The client should then send the SETCLIENTID_CONFIRM to confirm the client ID <NULL>.

SETCLIENTID_CONFIRM does not establish or renew a lease <NULL>.  However, if SETCLIENTID_CONFIRM removes relevant leased client state, and that state does not include existing delegations, the server MUST allow the client a period of time no less than the value of the lease_time attribute, to reclaim (via the CLAIM_DELEGATE_PREV claim type of the OPEN operation) its delegations before removing unreclaimed delegations <NULL>.


