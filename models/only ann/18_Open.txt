16.16.  Operation 18: OPEN - Open a Regular File

16.16.1.  SYNOPSIS

     (cfh), seqid, share_access, share_deny, owner, openhow, claim ->
     (cfh), stateid, cinfo, rflags, attrset, delegation

16.16.2.  ARGUMENT

   /*
    * Various definitions for OPEN
    */
   enum createmode4 {
           UNCHECKED4      = 0,
           GUARDED4        = 1,
           EXCLUSIVE4      = 2
   };

   union createhow4 switch (createmode4 mode) {
    case UNCHECKED4:
    case GUARDED4:
            fattr4         createattrs;
    case EXCLUSIVE4:
            verifier4      createverf;
   };

   enum opentype4 {
           OPEN4_NOCREATE  = 0,
           OPEN4_CREATE    = 1
   };

   union openflag4 switch (opentype4 opentype) {
    case OPEN4_CREATE:
            createhow4     how;
    default:
            void;
   };


   /* Next definitions used for OPEN delegation */
   enum limit_by4 {
           NFS_LIMIT_SIZE          = 1,
           NFS_LIMIT_BLOCKS        = 2
           /* others as needed */
   };

   struct nfs_modified_limit4 {
           uint32_t        num_blocks;
           uint32_t        bytes_per_block;
   };

   union nfs_space_limit4 switch (limit_by4 limitby) {
    /* limit specified as file size */
    case NFS_LIMIT_SIZE:
            uint64_t               filesize;
    /* limit specified by number of blocks */
    case NFS_LIMIT_BLOCKS:
            nfs_modified_limit4    mod_blocks;
   };

   enum open_delegation_type4 {
           OPEN_DELEGATE_NONE      = 0,
           OPEN_DELEGATE_READ      = 1,
           OPEN_DELEGATE_WRITE     = 2
   };

   enum open_claim_type4 {
           CLAIM_NULL              = 0,
           CLAIM_PREVIOUS          = 1,
           CLAIM_DELEGATE_CUR      = 2,
           CLAIM_DELEGATE_PREV     = 3
   };

   struct open_claim_delegate_cur4 {
           stateid4        delegate_stateid;
           component4      file;
   };

   union open_claim4 switch (open_claim_type4 claim) {
    /*
     * No special rights to file.
     * Ordinary OPEN of the specified file.
     */
    case CLAIM_NULL:
            /* CURRENT_FH: directory */
            component4      file;
    /*
     * Right to the file established by an
     * open previous to server reboot.  File
     * identified by filehandle obtained at
     * that time rather than by name.
     */
    case CLAIM_PREVIOUS:
            /* CURRENT_FH: file being reclaimed */
            open_delegation_type4   delegate_type;

    /*
     * Right to file based on a delegation
     * granted by the server.  File is
     * specified by name.
     */
    case CLAIM_DELEGATE_CUR:
            /* CURRENT_FH: directory */
            open_claim_delegate_cur4        delegate_cur_info;

    /*
     * Right to file based on a delegation
     * granted to a previous boot instance
     * of the client.  File is specified by name.
     */
    case CLAIM_DELEGATE_PREV:
            /* CURRENT_FH: directory */
            component4      file_delegate_prev;
   };

   /*
    * OPEN: Open a file, potentially receiving an open delegation
    */
   struct OPEN4args {
           seqid4          seqid;
           uint32_t        share_access;
           uint32_t        share_deny;
           open_owner4     owner;
           openflag4       openhow;
           open_claim4     claim;
   };


16.16.3.  RESULT

   struct open_read_delegation4 {
    stateid4 stateid;    /* Stateid for delegation */
    bool     recall;     /* Pre-recalled flag for
                            delegations obtained
                            by reclaim (CLAIM_PREVIOUS) */

    nfsace4 permissions; /* Defines users who don't
                            need an ACCESS call to
                            open for read */
   };

   struct open_write_delegation4 {
    stateid4 stateid;      /* Stateid for delegation */
    bool     recall;       /* Pre-recalled flag for
                              delegations obtained
                              by reclaim
                              (CLAIM_PREVIOUS) */

    nfs_space_limit4
              space_limit; /* Defines condition that
                              the client must check to
                              determine whether the
                              file needs to be flushed
                              to the server on close */

    nfsace4   permissions; /* Defines users who don't
                              need an ACCESS call as
                              part of a delegated
                              open */
   };

   union open_delegation4 switch
      (open_delegation_type4 delegation_type) {
           case OPEN_DELEGATE_NONE:
                   void;
           case OPEN_DELEGATE_READ:
                   open_read_delegation4 read;
           case OPEN_DELEGATE_WRITE:
                   open_write_delegation4 write;
   };

   /*
    * Result flags
    */

   /* Client must confirm open */
   const OPEN4_RESULT_CONFIRM      = 0x00000002;
   /* Type of file locking behavior at the server */
   const OPEN4_RESULT_LOCKTYPE_POSIX = 0x00000004;

   struct OPEN4resok {
    stateid4       stateid;      /* Stateid for open */
    change_info4   cinfo;        /* Directory change info */
    uint32_t       rflags;       /* Result flags */
    bitmap4        attrset;      /* attribute set for create */
    open_delegation4 delegation; /* Info on any open
                                    delegation */
   };

   union OPEN4res switch (nfsstat4 status) {
    case NFS4_OK:
            /* CURRENT_FH: opened file */
            OPEN4resok      resok4;
    default:
            void;
   };

16.16.4.  Warning to Client Implementers

OPEN resembles LOOKUP in that it generates a filehandle for the client to use <NULL>.  Unlike LOOKUP, though, OPEN creates server state on the filehandle <NULL>.  In normal circumstances, the client can only release this state with a CLOSE operation <NULL>.  CLOSE uses the current filehandle to determine which file to close <NULL>.  Therefore, the client MUST follow every OPEN operation with a GETFH operation in the same COMPOUND procedure <NULL>.  This will supply the client with the filehandle such that CLOSE can be used appropriately <NULL>.

Simply waiting for the lease on the file to expire is insufficient because the server may maintain the state indefinitely as long as another client does not attempt to make a conflicting access to the same file <NULL>.

16.16.5.  DESCRIPTION

The OPEN operation creates and/or opens a regular file in a directory with the provided name <NULL>.  If the file does not exist at the server and creation is desired, specification of the method of creation is provided by the openhow parameter <NULL>.  The client has the choice of three creation methods: UNCHECKED4, GUARDED4, or EXCLUSIVE4 <NULL>.

If the current filehandle is a named attribute directory, OPEN will then create or open a named attribute file <NULL>.  Note that exclusive create of a named attribute is not supported <NULL>.  If the createmode is EXCLUSIVE4 and the current filehandle is a named attribute directory, the server will return EINVAL <NULL>.

UNCHECKED4 means that the file should be created if a file of that name does not exist and encountering an existing regular file of that name is not an error <NULL>.  For this type of create, createattrs specifies the initial set of attributes for the file <NULL>.  The set of attributes may include any writable attribute valid for regular files <NULL>.  When an UNCHECKED4 create encounters an existing file, the attributes specified by createattrs are not used, except that when a size of zero is specified, the existing file is truncated <NULL>.  If GUARDED4 is specified, the server checks for the presence of a duplicate object by name before performing the create <NULL>.  If a duplicate exists, an error of NFS4ERR_EXIST is returned as the status <NULL>.  If the object does not exist, the request is performed as described for UNCHECKED4 <NULL>.  For each of these cases (UNCHECKED4 and GUARDED4), where the operation is successful, the server will return to the client an attribute mask signifying which attributes were successfully set for the object <NULL>.

EXCLUSIVE4 specifies that the server is to follow exclusive creation semantics, using the verifier to ensure exclusive creation of the target <NULL>.  The server should check for the presence of a duplicate object by name <NULL>.  If the object does not exist, the server creates the object and stores the verifier with the object <NULL>.  If the object does exist and the stored verifier matches the verifier provided by the client, the server uses the existing object as the newly created object <NULL>.  If the stored verifier does not match, then an error of NFS4ERR_EXIST is returned <NULL>.  No attributes may be provided in this case, since the server may use an attribute of the target object to store the verifier <NULL>.  If the server uses an attribute to store the exclusive create verifier, it will signify which attribute was used by setting the appropriate bit in the attribute mask that is returned in the results <NULL>.

For the target directory, the server returns change_info4 information in cinfo <NULL>.  With the atomic field of the change_info4 struct, the server will indicate if the before and after change attributes were obtained atomically with respect to the link creation <NULL>.  Upon successful creation, the current filehandle is replaced by that of the new object <NULL>.

The OPEN operation provides for Windows share reservation capability with the use of the share_access and share_deny fields of the OPEN arguments <NULL>.  The client specifies at OPEN the required share_access and share_deny modes <NULL>.  For clients that do not directly support SHAREs (i.e., UNIX), the expected deny value is DENY_NONE <NULL>.  In the case that there is an existing share reservation that conflicts with the OPEN request, the server returns the error NFS4ERR_SHARE_DENIED <NULL>.  For a complete SHARE request, the client must provide values for the owner and seqid fields for the OPEN argument <NULL>.  For additional discussion of share semantics, see Section 9.9 <NULL>.

In the case that the client is recovering state from a server failure, the claim field of the OPEN argument is used to signify that the request is meant to reclaim state previously held <NULL>.  The claim field of the OPEN argument is used to specify the file to be opened and the state information that the client claims to possess <NULL>.  There are four basic claim types that cover the various situations for an OPEN <NULL>.  They are as follows:

CLAIM_NULL:  For the client, this is a new OPEN request, and there is no previous state associated with the file for the client <NULL>.

CLAIM_PREVIOUS:  The client is claiming basic OPEN state for a file that was held previous to a server reboot <NULL>.  This is generally used when a server is returning persistent filehandles; the client may not have the filename to reclaim the OPEN <NULL>.

CLAIM_DELEGATE_CUR:  The client is claiming a delegation for OPEN as granted by the server <NULL>.  This is generally done as part of recalling a delegation <NULL>.

CLAIM_DELEGATE_PREV:  The client is claiming a delegation granted to a previous client instance <NULL>.  This claim type is for use after a SETCLIENTID_CONFIRM and before the corresponding DELEGPURGE in two situations: after a client reboot and after a lease expiration that resulted in loss of all lock state <NULL>.  The server MAY support CLAIM_DELEGATE_PREV <NULL>.  If it does support CLAIM_DELEGATE_PREV, SETCLIENTID_CONFIRM MUST NOT remove the client's delegation state, and the server MUST support the DELEGPURGE operation <NULL>.

The following errors apply to use of the CLAIM_DELEGATE_PREV claim type:

o  NFS4ERR_NOTSUPP is returned if the server does not support this claim type <NULL>.

o  NFS4ERR_INVAL is returned if the reclaim is done at an inappropriate time, e.g., after DELEGPURGE has been done <NULL>.

o  NFS4ERR_BAD_RECLAIM is returned if the other error conditions do not apply and the server has no record of the delegation whose reclaim is being attempted <NULL>.

For OPEN requests whose claim type is other than CLAIM_PREVIOUS (i.e., requests other than those devoted to reclaiming opens after a server reboot) that reach the server during its grace or lease expiration period, the server returns an error of NFS4ERR_GRACE <NULL>.

For any OPEN request, the server may return an open delegation, which allows further opens and closes to be handled locally on the client as described in Section 10.4 <NULL>.  Note that delegation is up to the server to decide <NULL>.  The client should never assume that delegation will or will not be granted in a particular instance <NULL>.  It should always be prepared for either case <NULL>.  A partial exception is the reclaim (CLAIM_PREVIOUS) case, in which a delegation type is claimed <NULL>.  In this case, delegation will always be granted, although the server may specify an immediate recall in the delegation structure <NULL>.

The rflags returned by a successful OPEN allow the server to return information governing how the open file is to be handled <NULL>.

OPEN4_RESULT_CONFIRM indicates that the client MUST execute an OPEN_CONFIRM operation before using the open file <NULL>. OPEN4_RESULT_LOCKTYPE_POSIX indicates that the server's file locking behavior supports the complete set of POSIX locking techniques [fcntl] <NULL>.  From this, the client can choose to manage file locking state in such a way as to handle a mismatch of file locking management <NULL>.

If the component is of zero length, NFS4ERR_INVAL will be returned <NULL>. The component is also subject to the normal UTF-8, character support, and name checks <NULL>.  See Section 12.7 for further discussion <NULL>.

When an OPEN is done and the specified open-owner already has the resulting filehandle open, the result is to "OR" together the new share and deny status, together with the existing status <NULL>.  In this case, only a single CLOSE need be done, even though multiple OPENs were completed <NULL>.  When such an OPEN is done, checking of share reservations for the new OPEN proceeds normally, with no exception for the existing OPEN held by the same owner <NULL>.  In this case, the stateid returned has an "other" field that matches that of the previous open, while the seqid field is incremented to reflect the changed status due to the new open (Section 9.1.4) <NULL>.

If the underlying file system at the server is only accessible in a read-only mode and the OPEN request has specified OPEN4_SHARE_ACCESS_WRITE or OPEN4_SHARE_ACCESS_BOTH, the server will return NFS4ERR_ROFS to indicate a read-only file system <NULL>.

As with the CREATE operation, the server MUST derive the owner, owner ACE, group, or group ACE if any of the four attributes are required and supported by the server's file system <NULL>.  For an OPEN with the EXCLUSIVE4 createmode, the server has no choice, since such OPEN calls do not include the createattrs field <NULL>.  Conversely, if createattrs is specified and includes owner or group (or corresponding ACEs) that the principal in the RPC's credentials does not have authorization to create files for, then the server may return NFS4ERR_PERM <NULL>.

In the case where an OPEN specifies a size of zero (e.g., truncation)  and the file has named attributes, the named attributes are left as is <NULL>.  They are not removed <NULL>.

16.16.6.  IMPLEMENTATION

The OPEN operation contains support for EXCLUSIVE4 create <NULL>.  The mechanism is similar to the support in NFSv3 [RFC1813] <NULL>.  As in NFSv3, this mechanism provides reliable exclusive creation <NULL>.  Exclusive create is invoked when the how parameter is EXCLUSIVE4 <NULL>.  In this case, the client provides a verifier that can reasonably be expected to be unique <NULL>.  A combination of a client identifier, perhaps the client network address, and a unique number generated by the client, perhaps the RPC transaction identifier, may be appropriate <NULL>.

If the object does not exist, the server creates the object and stores the verifier in stable storage <NULL>.  For file systems that do not provide a mechanism for the storage of arbitrary file attributes, the server may use one or more elements of the object metadata to store the verifier <NULL>.  The verifier must be stored in stable storage to prevent erroneous failure on retransmission of the request <NULL>.  It is assumed that an exclusive create is being performed because exclusive semantics are critical to the application <NULL>.  Because of the expected usage, exclusive create does not rely solely on the normally volatile duplicate request cache for storage of the verifier <NULL>.  The duplicate request cache in volatile storage does not survive a crash and may actually flush on a long network partition, opening failure windows <NULL>. In the UNIX local file system environment, the expected storage location for the verifier on creation is the metadata (timestamps) of the object <NULL>.  For this reason, an exclusive object create may not include initial attributes because the server would have nowhere to store the verifier <NULL>.

If the server cannot support these exclusive create semantics, possibly because of the requirement to commit the verifier to stable storage, it should fail the OPEN request with the error NFS4ERR_NOTSUPP <NULL>.

During an exclusive CREATE request, if the object already exists, the server reconstructs the object's verifier and compares it with the verifier in the request <NULL>.  If they match, the server treats the request as a success <NULL>.  The request is presumed to be a duplicate of an earlier, successful request for which the reply was lost and that the server duplicate request cache mechanism did not detect <NULL>.  If the verifiers do not match, the request is rejected with the status NFS4ERR_EXIST <NULL>.

Once the client has performed a successful exclusive create, it must issue a SETATTR to set the correct object attributes <NULL>.  Until it does so, it should not rely upon any of the object attributes, since the server implementation may need to overload object metadata to store the verifier <NULL>.  The subsequent SETATTR must not occur in the same COMPOUND request as the OPEN <NULL>.  This separation will guarantee that the exclusive create mechanism will continue to function properly in the face of retransmission of the request <NULL>.

Use of the GUARDED4 attribute does not provide "exactly-once" semantics <NULL>.  In particular, if a reply is lost and the server does not detect the retransmission of the request, the operation can fail with NFS4ERR_EXIST, even though the create was performed successfully <NULL>. The client would use this behavior in the case that the application has not requested an exclusive create but has asked to have the file truncated when the file is opened <NULL>.  In the case of the client timing out and retransmitting the create request, the client can use GUARDED4 to prevent a sequence such as create, write, create (retransmitted) from occurring <NULL>.

For share reservations (see Section 9.9), the client must specify a value for share_access that is one of OPEN4_SHARE_ACCESS_READ, OPEN4_SHARE_ACCESS_WRITE, or OPEN4_SHARE_ACCESS_BOTH <NULL>.  For share_deny, the client must specify one of OPEN4_SHARE_DENY_NONE, OPEN4_SHARE_DENY_READ, OPEN4_SHARE_DENY_WRITE, or OPEN4_SHARE_DENY_BOTH <NULL>.  If the client fails to do this, the server must return NFS4ERR_INVAL <NULL>.

Based on the share_access value (OPEN4_SHARE_ACCESS_READ, OPEN4_SHARE_ACCESS_WRITE, or OPEN4_SHARE_ACCESS_BOTH), the client should check that the requester has the proper access rights to perform the specified operation <NULL>.  This would generally be the results of applying the ACL access rules to the file for the current requester <NULL>.  However, just as with the ACCESS operation, the client should not attempt to second-guess the server's decisions, as access rights may change and may be subject to server administrative controls outside the ACL framework <NULL>.  If the requester is not authorized to READ or WRITE (depending on the share_access value), the server must return NFS4ERR_ACCESS <NULL>.  Note that since the NFSv4 protocol does not impose any requirement that READs and WRITEs issued for an open file have the same credentials as the OPEN itself, the server still must do appropriate access checking on the READs and WRITEs themselves <NULL>.

If the component provided to OPEN resolves to something other than a regular file (or a named attribute), an error will be returned to the client <NULL>.  If it is a directory, NFS4ERR_ISDIR is returned; otherwise, NFS4ERR_SYMLINK is returned <NULL>.  Note that NFS4ERR_SYMLINK is returned for both symlinks and for special files of other types; NFS4ERR_INVAL would be inappropriate, since the arguments provided by the client were correct, and the client cannot necessarily know at the time it sent the OPEN that the component would resolve to a non-regular file <NULL>.

If the current filehandle is not a directory, the error NFS4ERR_NOTDIR will be returned <NULL>.

If a COMPOUND contains an OPEN that establishes an OPEN_DELEGATE_WRITE delegation, then subsequent GETATTRs normally result in a CB_GETATTR being sent to the client holding the delegation <NULL>.  However, in the case in which the OPEN and GETATTR are part of the same COMPOUND, the server SHOULD understand that the operations are for the same client ID and avoid querying the client, which will not be able to respond <NULL>.  This sequence of OPEN and GETATTR SHOULD be understood to be the retrieval of the size and change attributes at the time of OPEN <NULL>.  Further, as explained in Section 15.2.5, the client should not construct a COMPOUND that mixes operations for different client IDs <NULL>.


